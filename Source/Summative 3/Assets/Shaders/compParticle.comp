#version 430 core

layout (local_size_x = 32, local_size_y = 32) in;

// An image to store data into.
layout (rg32f) uniform image2D image;

void main(void) 
{ // Store the local invocation ID into the image.
	imageStore( image,
	ivec2(gl_GlobalInvocationID.xy), 
	vec4(vec2(gl_LocalInvocationID.xy) / vec2(gl_WorkGroupSize.xy), 0.0, 0.0) );
}


// Uniform block containing positions and masses of the attractors
layout (std140, binding = 0) uniform attractor_block {
vec4 attractor[64]; // xyz = position, w = mass
};

// Process particles in blocks of 128
layout (local_size_x = 128) in;
// Buffers containing the positions and velocities of the particles
layout (rgba32f, binding = 0) uniform imageBuffer velocity_buffer;
layout (rgba32f, binding = 1) uniform imageBuffer position_buffer;
// Delta time
uniform float dt;

void main(void){
// Read the current position and velocity from the buffers
vec4 vel = imageLoad(velocity_buffer, int(gl_GlobalInvocationID.x));
vec4 pos = imageLoad(position_buffer, int(gl_GlobalInvocationID.x));
int i;
pos.xyz += vel.xyz * dt; // Update position using current velocity *
time
pos.w -= 0.0001 * dt; // Update "life" of particle in w component
// For each attractor...
for (i = 0; i < 4; i++) {
// Calculate force and update velocity accordingly
vec3 dist = (attractor[i].xyz - pos.xyz); vel.xyz += dt * dt *
attractor[i].w * normalize(dist) / (dot(dist, dist) + 10.0);
}

/*



layout (std140, binding = 0) uniform attractor_block
{
	vec4 attractor[64];
};

//Process particles in block of 128

layout(local_size_x = 128) in;
layout(rgba32f, binding = 1) uniform imageBuffer velocity_buffer;
layout(rgba32f, binding = 2) uniform imageBuffer position_buffer;


//Delta Time

uniform float dt;


void main(void)
{
	//Read the current position and velocity from the buffers
	vec4 vel = imageLoad(velocity_buffer, int(gl_GlobalInvocationID.x));
	vec4 pos = imageLoad(position_buffer, int(gl_GlobalInvocationID.x));

	int i = 0;
	
	//Update the position using current velocity * delta time
	pos.xyz += vel.xyz * dt;

	//Update the life time of the particle by deduction from the weight
	pos.w -= 0.1;

	//for each attractor
	for(i = 0; i < 4; i++)
	{
		//Calcualte the force and update velocity accordingly
		vec3 dist = (vec3(-4, 5, -8.342) - pos.xyz); 
		vel.xyz += dt * dt * 1.0 * normalize(dist) / (dot(dist, dist) + 10.0);
	}

	//if the particle expires, reset it
	if(pos.w <= 0.0)
	{
		pos.xyz = -pos.xyz * 0.01;
		vel.xyz *= 0.01;
		pos.w += 1.0f;
	}

	//Store the new position and velocity back into the buffers
	imageStore(position_buffer, int(gl_GlobalInvocationID.x), pos);
	imageStore(velocity_buffer, int(gl_GlobalInvocationID.x), vel);
}
*/
